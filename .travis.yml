language: generic
sudo: false

env:
  matrix:
  - CONDAPY=2.7
  - CONDAPY=3.6
  global:
    - PACKAGE_NAME=picky-conda

cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- if ! [[ $TRAVIS_TAG ]]; then rm -rf $HOME/miniconda/conda-bld; fi
- rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history

before_install:
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${CONDAPY}" = "2.7" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
    else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi

install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes --set changeps1 no
- conda install -q conda conda-build
# Useful for debugging any issues with conda
- conda info -a

script:
# unit tests
- conda env create python=$CONDAPY --file environment.yaml -n test-$CONDAPY
- conda activate test-$CONDAPY
- coverage run -m pytest
- conda deactivate

# check we can build the package
- conda build -q conda.recipe

# integration tests
- conda env create -n integration-$CONDAPY python=$CONDAPY
- conda activate integration-$CONDAPY
- conda install --use-local ${PACKAGE_NAME}
- picky lock
- picky check

after_success:
  - coveralls
